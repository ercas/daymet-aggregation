#!/usr/bin/env python3
#
# Convert a file of extreme weather indicators generated by
# stage3_extreme_weather.R into a file of hot and cold waves and singleton
# extreme weather events, where waves are defined as two or more days of
# extreme weather concurrently and a singleton extreme weather event is a day
# of extreme weather not followed or preceded  by another day of extreme
# weather.
#
# The output file will have a unique ID for each wave or singleton extreme
# weather event, the length of the wave or "1" for singleton events, and the
# index of the day in the wave e.g. "1" for the 1st day, "2" for the 2nd day,
# etc.
#
# Contact: Edgar Castro <edgar_castro@g.harvard.edu>

import csv
import datetime
import gzip
import typing

import tqdm

def detect_id_column(path: str) -> str:
    with gzip.open(path, "rt") as input_fp:
        return next(csv.reader(input_fp))[0]

def extract_waves(input_path: str,
                  output_path: str,
                  id_field: str,
                  output_fieldnames: typing.List[str]
                  ) -> None:
    with gzip.open(input_path, "rt") as input_fp, gzip.open(output_path, "wt") as output_fp:
        reader = csv.DictReader(input_fp)
        writer = csv.DictWriter(output_fp, fieldnames=output_fieldnames)

        previous_date = datetime.datetime(1, 1, 1)
        previous_extreme = None
        previous_id = None

        date_stack = []

        header = next(reader)
        writer.writeheader()

        wave_id = 0

        for line in reader:
            this_date = datetime.datetime(
                int(line["year"]),
                int(line["month"]),
                int(float(line["day"]) + 0.5)
            )
            this_id = line[id_field]
            this_extreme = line["extreme"]

            difference = (this_date - previous_date).days

            if (this_id == previous_id) and (difference == 1):
                # if len(date_stack) == 0:
                #     date_stack.append(previous_date)
                date_stack.append(this_date)

            else:
                # dump the stack
                wave_length = len(date_stack)
                if wave_length > 0:
                    wave_id += 1
                    for (i, date) in enumerate(date_stack):
                        result = {
                            id_field: this_id,
                            "year": line["year"],
                            "month": line["month"],
                            "day": line["day"],
                            "extreme": this_extreme,
                            "wave_id": wave_id,
                            "wave_index": i + 1,
                            "wave_length": wave_length
                        }
                        print(result)
                        writer.writerow(result)
                date_stack = []

            previous_date = this_date
            previous_id = this_id
            previous_extreme = this_extreme

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("input")
    parser.add_argument("-o", "--output", default=None)
    args = parser.parse_args()

    id_field = detect_id_column(args.input)

    if not args.output:
        args.output = "extreme_temp_waves.csv.gz"

    output_fieldnames = [
        id_field, "year", "month", "day", "extreme", "wave_id", "wave_index",
        "wave_length"
    ]

    extract_waves(
        args.input, args.output, id_field, output_fieldnames
    )
